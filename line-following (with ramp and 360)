#include <LiquidCrystal.h>
#include <PinChangeInterrupt.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

const int rs = 8, en = 9, d4 = 4, d5 = 5, d6 = 6, d7 = 7;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

int motor1pin1 = A3, motor1pin2 = A2;
int motor2pin1 = A1, motor2pin2 = A0;
int enA = 3, enB = 11;

int irL = 12, irR = 2;

volatile int leftEncoderCount;
volatile int rightEncoderCount;

const int encoderL = 10;
const int encoderR = 13;

const float wheelCircumference = 21.031;
const int pulsesPerRevolution = 20;

Adafruit_MPU6050 mpu;
float roll = 0;

int i = 1;

float gyroZ, previousGyroZ;
unsigned long previousTime;
float angleZ = 0; // Total angle of rotation in degrees
const float dt = 0.01; // Time step in seconds (10ms)

float distance = 0;

float time = 0;

void leftEncoderInterrupt() {
  leftEncoderCount++;
}

void rightEncoderInterrupt() {
  rightEncoderCount++;
}

void setup() {
  lcd.begin(16, 2);
  Serial.begin(9600);

  pinMode(motor1pin1, OUTPUT);
  pinMode(motor1pin2, OUTPUT);
  pinMode(motor2pin1, OUTPUT);
  pinMode(motor2pin2, OUTPUT);
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);

  pinMode(irL, INPUT);
  pinMode(irR, INPUT);

  pinMode(encoderL, INPUT_PULLUP);
  pinMode(encoderR, INPUT_PULLUP);
  attachPCINT(digitalPinToPCINT(encoderL), leftEncoderInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(encoderR), rightEncoderInterrupt, CHANGE);

  if (!mpu.begin()) {
    while (1); // Halt if MPU6050 initialization fails
  }

  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);

  previousTime = millis();
}

void turn360() {

  analogWrite(enA, 175);
  analogWrite(enB, 175);
  digitalWrite(motor1pin1, LOW);
  digitalWrite(motor1pin2, HIGH);
  digitalWrite(motor2pin1, HIGH);
  digitalWrite(motor2pin2, LOW);

  while (angleZ < 360) {  // Keep turning until angleZ reaches approximately 360
    sensors_event_t a, g, temp;
    mpu.getEvent(&a, &g, &temp); 
    // Calculate the time step
    unsigned long currentTime = millis();
    float dt = (currentTime - previousTime) / 1000.0; // Convert time to seconds
    previousTime = currentTime;
    // Integrate the gyro Z value to calculate the angle change

    angleZ += g.gyro.z * dt * 57.2958; // Convert rad/s to deg/s
    // Handle overflow
    if (angleZ >= 360.0) break;
  }
}

void loop() {
  int valL = digitalRead(irL);
  int valR = digitalRead(irR);

  if (valL == 1 && valR == 1) {
    analogWrite(enA, 80);
    analogWrite(enB, 80);
    digitalWrite(motor1pin1, HIGH);
    digitalWrite(motor1pin2, LOW);
    digitalWrite(motor2pin1, HIGH);
    digitalWrite(motor2pin2, LOW);

    if (roll > 1.5) {
      analogWrite(enA, 180);
      analogWrite(enB, 180);
      digitalWrite(motor1pin1, HIGH);
      digitalWrite(motor1pin2, LOW);
      digitalWrite(motor2pin1, HIGH);      
      digitalWrite(motor2pin2, LOW);

      if  (roll > 22 && roll <23 && i == 1) {
        analogWrite(enA, 100);
        analogWrite(enB, 100);
        digitalWrite(motor1pin1, HIGH);
        digitalWrite(motor1pin2, LOW);
        digitalWrite(motor2pin1, HIGH);      
        digitalWrite(motor2pin2, LOW);
        delay(4000); //stop at ramp
        i = i + 1;
      }
    }
    if  ((roll > 22 && roll <23) && i == 2) {
      analogWrite(enA, 100);
      analogWrite(enB, 100);
      digitalWrite(motor1pin1, HIGH);
      digitalWrite(motor1pin2, LOW);
      digitalWrite(motor2pin1, HIGH);      
      digitalWrite(motor2pin2, LOW);
      delay(4000); //stop at ramp
      i = i + 1;
    }
    if (i==3) {
      analogWrite(enA, 255);
      analogWrite(enB, 255);
      digitalWrite(motor1pin1, HIGH);
      digitalWrite(motor1pin2, LOW);
      digitalWrite(motor2pin1, HIGH);      
      digitalWrite(motor2pin2, LOW);
      delay(900);
      i = i + 1;
    }
    if (i==4 && (roll > -1 && roll < 2)) {
      digitalWrite(motor1pin1, LOW);
      digitalWrite(motor1pin2, LOW);
      digitalWrite(motor2pin1, LOW);
      digitalWrite(motor2pin2, LOW);
      delay(4000);
      turn360();
      digitalWrite(motor1pin1, LOW);
      digitalWrite(motor1pin2, LOW);
      digitalWrite(motor2pin1, LOW);
      digitalWrite(motor2pin2, LOW);
      delay(2000);
      analogWrite(enA, 85);
      analogWrite(enB, 85);
      digitalWrite(motor1pin1, HIGH);
      digitalWrite(motor1pin2, LOW);
      digitalWrite(motor2pin1, HIGH);
      digitalWrite(motor2pin2, LOW);
      i = i + 1;
    }
    if (distance>268 && distance<271) {
      digitalWrite(motor1pin1, LOW);
      digitalWrite(motor1pin2, LOW);
      digitalWrite(motor2pin1, LOW);
      digitalWrite(motor2pin2, LOW);
      delay(3000);
    }
  }
  else if (valL == 1 && valR == 0) {
    analogWrite(enA, 255);
    analogWrite(enB, 255);
    digitalWrite(motor1pin1, LOW);
    digitalWrite(motor1pin2, HIGH);
    digitalWrite(motor2pin1, HIGH);
    digitalWrite(motor2pin2, LOW);
  } 
  else if (valL == 0 && valR == 1) {
    analogWrite(enA, 255);
    analogWrite(enB, 255);
    digitalWrite(motor1pin1, HIGH);
    digitalWrite(motor1pin2, LOW);
    digitalWrite(motor2pin1, LOW);
    digitalWrite(motor2pin2, HIGH);
  } 
  else {
    if (i == 5 || i==4) {
      analogWrite(enA, 65);
      analogWrite(enB, 65);
      digitalWrite(motor1pin1, HIGH);
      digitalWrite(motor1pin2, LOW);
      digitalWrite(motor2pin1, HIGH);
      digitalWrite(motor2pin2, LOW);
      delay(900);
      digitalWrite(motor1pin1, LOW);
      digitalWrite(motor1pin2, LOW);
      digitalWrite(motor2pin1, LOW);
      digitalWrite(motor2pin2, LOW);
      delay(1000);
      i = 6;
      leftEncoderCount = 0;
      rightEncoderCount = 0;
    }
    digitalWrite(motor1pin1, LOW);
    digitalWrite(motor1pin2, LOW);
    digitalWrite(motor2pin1, LOW);
    digitalWrite(motor2pin2, LOW);
  }

  time = millis()/1000;

  if (i==6) {
    float leftDistance = (leftEncoderCount / (float)pulsesPerRevolution) * wheelCircumference;
    float rightDistance = (rightEncoderCount / (float)pulsesPerRevolution) * wheelCircumference;
    distance = (leftDistance + rightDistance) / 2.0;
    }
    
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);
  roll = atan2(-a.acceleration.x, sqrt(a.acceleration.y * a.acceleration.y + a.acceleration.z * a.acceleration.z)) * 180 / PI;
  Serial.println(roll);

  lcd.setCursor(0, 0);
  lcd.print("Time: ");
  lcd.print(time, 1); 
  lcd.print(" s");

  if (i<6) {
    lcd.setCursor(0, 1);
    lcd.print("Angle: ");
    lcd.print(roll + 2.7, 1);
    lcd.print(" deg ");
  }

  if (i==6) {
    lcd.setCursor(0, 1);
    lcd.print("Distance: ");
    lcd.print(distance, 1); 
    lcd.print(" cm");
  }
}
